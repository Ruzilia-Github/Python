# 1. 5.6 Вложенные списки
# Вам нужно посчитать сумму элементов двумерного квадратного (NxN) списка, которые расположены на главной диагонали.
#
# Под главной диагональю матрицы подразумевается диагональ, проведённая из левого верхнего угла в правый нижний.
#
# Программа сперва принимает на вход число N (N<=15) - количество строк и столбцов в списке, а затем в N строках записаны элементы списка.
#
# Sample Input 1:
#
# 2
# 1 2
# 3 4
# Sample Output 1:
#
# 5
#
# a = []
# n = int(input())
# for i in range (n):
#     a.append(list(map(int.input().split())))
#     s=0
#     for i in range(len(a)):
#         for j in range(len(a)):
#             if i==j:
#                 s +=a[i][j]
# print(s)


# 2. 5.6 Вложенные списки
# Обход элементов матрицы - 1
# Задана целочисленная квадратная матрица размером N x N. Необходимо обойти элементы этой матрицы сверху вниз слева направо и вывести элементы именно в таком порядке в виде таблицы.
#
# Программа принимает на вход натуральное число N – количество строк и столбцов матрицы. В каждой из последующих N строк записаны N целых чисел – элементы матрицы. Все числа во входных данных не превышают 100 по абсолютной величине.
#
# Sample Input 1:
#
# 5
# 3 4 9 1 2
# 8 2 0 5 1
# 4 7 4 8 7
# 7 1 3 3 8
# 5 6 3 7 0
# Sample Output 1:
#
# 3 8 4 7 5
# 4 2 7 1 6
# 9 0 4 3 3
# 1 5 8 3 7
# 2 1 7 8 0


# a = []
# n = int(input())
# for i in range(n):
#     a.append(list(map(int, input().  split())))
# for i in range(len(a)):
#     for j in range(len(a)):
#             print (a [j][i], end = " ")
#     print()
#
#  3  5.6 Вложенные списки
# Обход элементов матрицы - 2
# Задана целочисленная квадратная матрица размером N x N. Необходимо обойти элементы этой матрицы снизу вверх справо налево и вывести элементы именно в таком порядке в виде таблицы.
#
# Программа принимает на вход натуральное число N – количество строк и столбцов матрицы. В каждой из последующих N строк записаны N целых чисел – элементы матрицы.
# Sample Input 1:
#
# 5
# 3 4 9 6 2
# 8 2 0 5 1
# 4 7 4 8 7
# 7 1 3 3 8
# 5 6 3 7 0
# Sample Output 1:
#
# 0 8 7 1 2
# 7 3 8 5 6
# 3 3 4 0 9
# 6 1 7 2 4
# 5 7 4 8 3

