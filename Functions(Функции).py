# Напишите функцию matrix(), которая создает, заполняет и возвращает матрицу заданного размера. При этом (в зависимости от переданных аргументов) она должна вести себя так:
#
# matrix() — возвращает матрицу 1 \times 11× 1, в которой единственное число равно нулю;
# matrix(n) — возвращает матрицу n \times nn× n, заполненную нулями;
# matrix(n, m) — возвращает матрицу из nn строк и mm столбцов, заполненную нулями;
# matrix(n, m, value) — возвращает матрицу из nn строк и mm столбцов, в которой каждый элемент равен числу value.
# При создании функции пользуйтесь аргументами по умолчанию.
#
# Примечание 1. Приведенный ниже код:
#
# print(matrix())                   # матрица 1 × 1 из 0
# print(matrix(3))                  # матрица 3 × 3 из 0
# print(matrix(2, 5))               # матрица 2 × 5 из 0
# print(matrix(3, 4, 9))            # матрица 3 × 4 из 9
# должен выводить:
#
# [[0]]
# [[0, 0, 0], [0, 0, 0], [0, 0, 0]]
# [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]]
# [[9, 9, 9, 9], [9, 9, 9, 9], [9, 9, 9, 9]]

# def matrix(n=0, m=0, value=0):
#     if n == 0  and m == 0 and value == 0:
#         return [[0]]
#     if n > 0  and m == 0 and value == 0:
#         return [[0 for i in range(n)] for j in range(n)]
#     if n > 0  and m > 0 and value == 0:
#         return [[0 for i in range(m)] for j in range(n)]
#     if n > 0 and m > 0 and value > 0:
#         return [[value for i in range(m)] for j in range(n)]
#
# print(matrix())                   # матрица 1 × 1 из 0
# print(matrix(3))                  # матрица 3 × 3 из 0
# print(matrix(2, 5))               # матрица 2 × 5 из 0
# print(matrix(3, 4, 9))            # матрица 3 × 4 из 9
#
# ______________________________
#
# def matrix(n=1, m=0, value=0):
#     return [[value for _ in range(m if m else n)] for _ in range(n)]
# ____________________________________________________________________________
# Напишите функцию count_args(), которая принимает произвольное количество аргументов и возвращает количество переданных в нее аргументов.
#
# Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
#
# Примечание 2. Следующий программный код:
#
# print(count_args())
# print(count_args(10))
# print(count_args('stepik', 'beegeek'))
# print(count_args([], (''), 'a', 12, False))
# должен выводить:
#
# 0
# 1
# 2
# 5

# def count_args(*args):
#    return len(args)
#
# print(count_args())
# print(count_args(10))
# print(count_args('stepik', 'beegeek'))
# print(count_args([], (''), 'a', 12, False))
#
# _____________________________________________________________
# Напишите функцию sq_sum(), которая принимает произвольное количество числовых аргументов и возвращает сумму их квадратов.
#
# Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
#
# Примечание 2. Следующий программный код:
#
# print(sq_sum())
# print(sq_sum(2))
# print(sq_sum(1.5, 2.5))
# print(sq_sum(1, 2, 3))
# print(sq_sum(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
# должен выводить:
#
# 0
# 4
# 8.5
# 14
# 385

# def sq_sum(*args):
#     sum = 0
#     for i in args:
#         sum += i**2
#     return sum
# _____________________________________________________________
#
# Напишите функцию mean(), которая принимает произвольное количество аргументов и возвращает среднее арифметическое переданных в нее числовых (int или float) аргументов.
#
# Примечание 1. Обратите внимание, что функция должна принимать не список, а именно произвольное количество аргументов.
#
# Примечание 2. Функция должна игнорировать аргументы всех типов, кроме int или float.
#
# Примечание 3. Следующий программный код:
#
# print(mean())
# print(mean(7))
# print(mean(1.5, True, ['stepik'], 'beegeek', 2.5, (1, 2)))
# print(mean(True, ['stepik'], 'beegeek', (1, 2)))
# print(mean(-1, 2, 3, 10, ('5')))
# print(mean(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
# должен выводить:
#
# 0.0
# 7.0
# 2.0
# 0.0
# 3.5
# 5.5

def mean(*args):
    sum = 0
    count = 0
    for i in args:
        print(type(i))
        if 0 <= i <= 9:
            sum += i
            return sum
            count +=1
        else:
            continue
    return sum / count


# print(mean())
# print(mean(7))
# print(mean(1.5, True, ['stepik'], 'beegeek', 2.5, (1, 2)))
# print(mean(True, ['stepik'], 'beegeek', (1, 2)))
# print(mean(-1, 2, 3, 10, ('5')))
print(mean(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))





