# n1 = input()
# n2 = input()
# if 'a' in n1 or 'c' in n1 or'e' in n1 or'g' in n1:
#     if '1' in n1 or '3' in n1 or'5' in n1 or'7' in n1:
#        n1 = False
#     else:
#        n1 = True
# elif 'b' in n1 or 'd' in n1 or'f' in n1 or'h' in n1:
#     if '2' in n1 or '4' in n1 or'6' in n1 or'8' in n1:
#        n1 = False
#     else:
#        n1 = True
# if 'a' in n2 or 'c' in n2 or 'e' in n2 or 'g' in n2:
#     if '1' in n2 or '3' in n2 or '5' in n2 or '7' in n2:
#         n2 = False
#     else:
#         n2 = True
# elif 'b' in n2 or 'd' in n2 or 'f' in n2 or 'h' in n2:
#     if '2' in n2 or '4' in n2 or '6' in n2 or '8' in n2:
#         n2 = False
#     else:
#         n2 = True
# if n1==n2:
#     print("YES")
# else:
#     print('NO')

# ____________________________________________________________________
# Напишите программу, которая определяет, оканчивается ли год с данным номером на два нуля. Если год оканчивается, то выведите «YES», иначе выведите «NO».
#
# Sample Input 1:
#
# 2000
# Sample Output 1:
#
# YES
# Sample Input 2:
#
# 1999
# Sample Output 2:
#
# NO


#
# n = int(input())
# # print(n%10)
# # print(n//10%10)
# if n%10 == 0  and n//10%10 == 0:
#     print("YES")
# else:
#     print("NO")
#
# ___________________________________________________________________

# Заданы две клетки шахматной доски. Напишите программу, которая определяет имеют ли указанные клетки один цвет или нет. Если они покрашены в один цвет, то выведите слово «YES», а если в разные цвета — то «NO».
#
# Формат входных данных
# На вход программе подаётся четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки.

# Sample Input 1:
#
# 1
# 1
# 2
# 6
# Sample Output 1:
#
# YES


# n1 = int(input())
# n2 = int(input())
# b1 = int(input())
# b2 = int(input())
# a = ''
# b = ''
# if n1 == 1 or n1 == 3 or n1 == 5 or n1 == 7:
#     if n2 == 1 or n2 == 3 or n2 == 5 or n2 == 7:
#        a = "white"
#     else:
#        a = "black"
# elif n1 == 2 or n1 == 4 or n1 == 6 or n1 == 8:
#     if n2 == 2 or n2 == 4 or n2 == 6 or n2 == 8:
#        a = "white"
#     else:
#        a = "black"
# if b1 == 1 or b1 == 3 or b1 == 5 or b1 == 7:
#     if b2 == 1 or b2 == 3 or b2 == 5 or b2 == 7:
#        b = "white"
#     else:
#        b = "black"
# elif b1 == 2 or b1 == 4 or b1 == 6 or b1 == 8:
#     if b2 == 2 or b2 == 4 or b2 == 6 or b2 == 8:
#        b = "white"
#     else:
#        b = "black"
# if a == b:
#     print("YES")
# else:
#     print('NO')

# _________________________________________________
# Футбольная команда набирает девочек от 10 до 15 лет включительно. Напишите программу, которая запрашивает возраст и пол претендента, используя обозначение пола буквы m (от male – мужчина) и f (от female – женщина) и определяет подходит ли претендент для вступления в команду или нет. Если претендент подходит, то выведите «YES», иначе выведите «NO».
#
# Формат входных данных
# На вход программе подаётся натуральное число – возраст претендента и буква обозначающая пол m (мужчина) или f (женщина).

# a = int(input())
# b = input()
# if 10 <= a <= 15  and b == "f":
#     print('YES')
# else:
#     print("NO")


# _________________________________________________________
# Напишите программу, которая считывает целое число и выводит соответствующую ему римскую цифру. Если число находится вне диапазона 1-10, то программа должна вывести текст «ошибка».
#
# В таблице приведены римские цифры для чисел от 1 до 10.

# n = int(input())
# a = ['I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX', 'X']
# if 1 <= n <=10:
#     print(a[n-1])
# else:
#     print("ошибка")

# _______________________________________________________

# если число нечётное, то вывести «YES»;
# если число чётное в диапазоне от 2 до 5 (включительно), то вывести «NO»;
# если число чётное в диапазоне от 6 до 20 (включительно), то вывести «YES»;
# если число чётное и больше 20, то вывести «NO».

# n = int(input())
# if n%2 != 0:
#    print("YES")
# elif n%2 == 0:
#     if 2 <= n <= 5:
#        print("NO")
#     elif 6 <= n <= 20:
#        print("YES")
#     elif n > 20:
#        print("NO")


# ____________________________________________________________
#
# Даны две различные клетки шахматной доски. Напишите программу,  которая определяет, может ли конь попасть с первой клетки на вторую одним ходом. Программа получает на вход четыре числа от 1 до 8 каждое, задающие номер столбца и номер строки сначала для первой клетки, потом для второй клетки. Программа должна вывести «YES», если из первой клетки ходом коня можно попасть во вторую или «NO» в противном случае.
#
# Формат входных данных
# На вход программе подаётся четыре числа от 1 до 8.
#
# x1 = int(input())
# y1 = int(input())
# x2 = int(input())
# y2 = int(input())
#
# if abs(x1 - x2) == 1 and abs(y1 - y2) == 2:
#     print('YES')
# elif abs(x1 - x2) == 2 and abs(y1 - y2) == 1:
#     print('YES')
# else:
#     print("NO")

# _________________________________________
#
# Программа принимает на вход три символа через пробел в одну строку. Необходимо вывести код каждого символа при помощи функции ord в определенном формате.


# a, c, b =map(str,input().split())
# print(f'Simvol code {a} is {ord(a)}.')
# print(f'Simvol code {c} is {ord(c)}.')
# print(f'Simvol code {b} is {ord(b)}.')

# ________________________________________________
#
# Напишите программу, которая считывает целое число, и затем сообщает какие числа будут следующим и предыдущим в определенном формате. Пробелы, знаки препинания, заглавные и строчные буквы важны!
#
# Sample Input:
#
# 99
# Sample Output:
#
# Для числа 99 предыдущим будет число 98.
# Для числа 99 следующим будет число 100.

# n = int(input())
# print(f"Для числа {n} предыдущим будет число {n-1}.")
# print(f"Для числа {n} следующим будет число {n+1}.")
#
# ______________________________________________________
# Напишите программу для перевода натурального значения секунд в значение минут определенного формата.
#
# Sample Input 1:
#
# 99
# Sample Output 1:
#
# 99 сек - это 1 мин. 39 сек.

# n = int(input())
# print(f'{n} сек - это {n//60} мин. {n%60} сек.')
#
# ________________________________________________________
# Вам поступает на вход два натуральных числа - ширина экрана и его высота в пикселях. В результате на экране разрешение экрана и общее количество пикселей в определенном формате. Все знаки препинания, пробелы, регистр букв важны. Также обратите внимание, что в этом месте «1920 x 1080» стоит английская буква «x»
#
# Sample Input:
#
# 1920 1080
# Sample Output:
#
# Разрешение экрана: 1920 x 1080.
# Общее количество пикселей = 2073600.

# ____________________________________________________________
# Вам поступает на вход два натуральных числа - ширина экрана и его высота в пикселях. В результате на экране разрешение экрана и общее количество пикселей в определенном формате. Все знаки препинания, пробелы, регистр букв важны. Также обратите внимание, что в этом месте «1920 x 1080» стоит английская буква «x»
#
# Sample Input:
#
# 1920 1080
# Sample Output:
#
# Разрешение экрана: 1920 x 1080.
# Общее количество пикселей = 2073600.

# a, b = map(int, input().split())
# print(f'Разрешение экрана: {a} x {b}.')
# print(f'Общее количество пикселей = {a * b}.')
#
# ______________________________________________________________
# Нашей программе поступает на вход x, y, z - три целых числа, обозначающие координаты вектора А. Затем необходимо найти координаты вектора B, путем увеличения на 5 каждой из координаты вектора А.
# #
# # Оба вектора необходимо распечатать в определенном формате
# #
# # Sample Input 1:
# #
# # 1
# # 2
# # 3
# # Sample Output 1:
# #
# # Vector A(1, 2, 3)
# # Vector B(6, 7, 8)

# a, b, c = int(input()), int(input()), int(input())
# print(f'Vector A({a}, {b}, {c})')
# print(f'Vector A({a + 5}, {b + 5}, {c + 5})')

# ________________________________________________

# Допишите программу ниже, чтобы она вывела через пробел в одной строке значения самого маленького и самого большого элементов списка my_list.

#
# my_list = [-214, 181, -139, 448, -664, -66, 213, 832, 717, -462, -924, -706, -85, -244, -222, -340, -482, -518, -781, 759, -593, 905, -354, -377, -141, -742, 383, -381, 109, -639, -480, -810, -686, 892, -612, 696, 993, 791, 631, -493, -218, -829, -275, 619, -628, -241, -565, -835, -69, 747, 711, -252, -811, -407, -153, 904, 933, -254, 307, -493, -419, -109, -543, 155, -127, 613, -452, -459, 856, 562, 333, -66, -77, -598, -779, -278, 867, 321, -20, -415, -357, 735, -906, -14, -370, 453, -630, -736, -830, -917, 32, 422, -895, 198, 284, 472, -986, -964, -989, 29]
# print(min(my_list), max(my_list))
#
# ___________________________________________________

# n, m =map(int, input().split())
# answer = n + (n - 1) // (m - 1)
# print(answer)
# ________________________________________________________
#
# Пользователь вводит целые числа по одному в строке, последовательность оканчивается числом 0. Все, что вводится после 0 не относится к последовательности. Напишите программу, которая выводит сумму всех членов данной последовательности.
#
# Sample Input 1:
#
# 1
# 2
# 3
# 0
# 5
# 6
# Sample Output 1:
#
# 6

# n = int(input())
# s = 0
# count = -1
# while s <= n:
#     a=s
#     count += 1
#     n1 = int(input())
#     s += n1
# print("Довольно!")
# print(a)
# print(count)
# _______________________________________________________
# Ване на день рождения подарили n кубиков. Он с друзьями решил построить из них пирамиду. Ваня хочет построить пирамиду следующим образом: на верхушке пирамиды должен находиться 1 кубик, на втором уровне — 1 + 2 = 3 кубика, на третьем — 1 + 2 + 3 = 6 кубиков, и так далее. Таким образом, на i-м уровне пирамиды должно располагаться 1 + 2 + ... + (i - 1) + i кубиков.
# n = int(input())
# used_cubers = 0
# cubes_in_row = 0
# row = 0
# while used_cubers <= n:
#     row +=1
#     cubes_in_row = cubes_in_row + row
#     used_cubers += cubes_in_row
# print(row -1)

# _______________________________________________
from math import *

# n, m = map(int, input().split())
# list1 = list(map(int, input().split()))
# list2 = list(map(int, input().split()))
# list3 = list1 + list2
# print(*sorted(list3))
#
# _________________________________________________
# Программа получает на вход натуральное число n > 1. Выведите минимальный делитель этого числа, отличный от единицы.
#
# К примеру для числа 12 делителями являются 1, 2, 3, 4, 6, 12.
#
# Sample Input 1:
#
# 12
# Sample Output 1:
#
# 2
#
# n = int(input())
# a = []
# for i in range(1,n+1):
#     if n % (i) == 0:
#         if i == 1:
#             continue
#         a.append(i)
# print(min(a))

# _______________________________________________________
# Давайте переберем все числа от а до b включительно и будем их выводить на экран, при этом нужно выполнить следующие условия:
#
# пропускать (не выводить) числа, которые делятся на 2 или на 3
# если встречаете число, кратное 777, необходимо принудительно закончить цикл, само это число не выводить

# n1, n2  = int(input()), int(input())
# n1 = n1 - 1
# while n1 < n2 :
#     n1 +=1
#     if n1 == 777:
#          break
#     if n1 % 2 == 0:
#          continue
#     if n1 % 3 == 0:
#          continue
#     print(n1)

# ________________________________________________________
#
# Вам на вход поступает слово и ваша задача в цикле while обойти все его буквы и распечатать их в формате фразы:
#
# «Текущая буква: <letter>».
#
# Как только вы встретите строчные английские буквы «e» или «a» нужно вывести фразу «Ага! Нашлась», перестать печатать буквы и принудительно выйти из цикла.
#
# В случае, если в слове не оказалось букв «e» или «a» необходимо вывести фразу «Распечатали все буквы»
#
# Sample Input 1:
#
# phrase
# Sample Output 1:
#
# Текущая буква: p
# Текущая буква: h
# Текущая буква: r
# Ага! Нашлась
#
# n = input()
# i=0
# while len(n) != i:
#     if n[i] == 'e' or n[i] == 'a':
#         print('Ага! Нашлась')
#         break
#     print(f'Текущая буква: {n[i]}')
#     i+=1
# else:
#     print('Распечатали все буквы')
# # ________________________________________________________



# На вход программе подается два натуральных числа aa и bb (a < ba< b). Напишите программу, которая находит натуральное число из отрезка [a; \, b][a;b] с максимальной суммой делителей.
#
# Формат входных данных
# На вход программе подаются два числа, каждое на отдельной строке.
#
# Формат выходных данных
# Программа должна вывести два числа на одной строке, разделенных пробелом: число с максимальной суммой делителей и сумму его делителей.

# a, b = int(input()), int(input())
# counter = 0 # счетчик подсчета суммы делителей
# number = 1 # число которое будем выводить (минимум 1)
# summa = 0  # тут будет сумма делителей, которую надо будет вывести
# for i in range(a, b + 1):  # проверяем каждое число в [a;b]
#     counter = 0 # обнуляем счетчик для каждого i
#     for j in range(1, i + 1):  # берем по очереди каждый делитель числа от [1 до самого числа]
#         if i % j == 0:  # если число делится на j без остатка, значит j - делитель числа
#             counter += j  # создаем сумму делителей
#     if counter >= summa:  # если сумма делителей больше или равна, чем суммаа делителей предыдущего числа
#         summa = counter  # то counter теперь равно кол-ву делителей этого числа вместо кол-ва предыдущего
#         number = i  # число у которого делителей оказалось больше, теперь равно number
# print(number, summa) # в конце концов, выводим само число (у которого больше делителей) и сумму этих делителей
#
# _____________________________________________________
# Дано натуральное число nn. Напишите программу, которая выводит значение суммы 1!+2!+3!+\ldots+n!1!+2!+3!+…+n!.
#
# Формат входных данных
# На вход программе подается одно натуральное число.

# import math
# n = int(input())
# sum_factorial = 0
# for i in range(1, n +1):
#     sum_factorial += math.factorial(i)
# print(sum_factorial)
# _______________________________________________________
# На вход программе поступает список из целых чисел. Ваша задача найти в данном списке наименьшее положительное значение. В случае, если положительных значений нет, выведите строку "Empty"
#
# Sample Input 1:
#
# 8 11 -9 0 5 -20
# Sample Output 1:
#
# 5
#
#
# a= list(map(int,input().split()))
# b=[]
# for i in range(len(a)):
#     if a[i]>0:
#         b.append(a[i])
# if len(b)<=0:
#     print("Empty")
# else:
#     print(min(b))
# __________________________________________________________

# lst=[]
# count=1
# for i in range(4):
#     lst.append(input())
# for i in lst:
#     print(i)
# for i in range(4):
#     for j in range(4):
# #         print([i][j], end=' ')
# #     print()
#         if lst[i][j] == lst[i+1][j] == lst[i][j+1] == lst[i+1][j+1]:
#             print('No')
#             break
#         else:
#             print('Yes')


# ________________________________________________________
# Вывести список, содержащий нечетные натуральные числа в интервале  [ nn; n^2n
# 2
#   ]
#
# Sample Input 1:
#
# 7
# Sample Output 1:
#
# [7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]

# n = int(input())
#
# b = [i for i in range(n, n**2 + 1) if i % 2 != 0]
# print(b)
# ____________________________________________________
#
# Создайте список первых букв каждого слова из строки st и выведите его на экран
# st = 'Create a list of the first letters of every word in this string'
#
# b=st.split()
#
# t = [b[i][0] for i in range(len(b))]
# print(t)
# ____________________________________________________
# При помощи генератора-списков создайте список, состоящий из слов,  начинающихся с буквы 't' или 'T'. Слова возьмите из переменной phrase, также не забывайте про метод split()
#
# В качестве ответа выведите полученный список, слова в нем должны стоять в том же порядке, в котором они стояли в изначальной фразе
# phrase = 'Take only the words that start with t in this sentence'
#
# phrase = 'Take only the words that start with t in this sentence'
# print([i for i in phrase.split() if i[0] in 't' or i[0] in 'T'])

# ______________________________________________________
# На вход программе подается четное число n, \, n \ge 2n,n≥2. Напишите программу, которая выводит список четных чисел
#
#  [2, 4, 6, ..., n].
#
#
# n = int(input())
# print([i for i in range(2, n +1) if i % 2 == 0])

# ______________________________________________________

# На вход программе подаются две строки текста, содержащие целые числа. Из данных строк формируются списки чисел L и M. Напишите программу, которая создает третий список, элементами которого являются суммы соответствующих элементов списков L и M. Далее программа должна вывести каждый элемент полученного списка на одной строке через 1 пробел.
#
# Формат входных данных
# На вход программе подаются две строки текста, содержащие целые числа, разделенные символом пробела.
#
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# n1 = list(map(int, input().split()))
# n2 = list(map(int, input().split()))
# a =[]
# for i in range(len(n1)):
#     a.append(n1[i] + n2[i])
# print(*a)
# ---------
# a = [int(i) for i in input().split()]
# b = [int(i) for i in input().split()]
# print(*[x + y for x, y in zip(a, b)])

# _________________________________________________________
# На вход программе подается строка текста, содержащая натуральные числа. Напишите программу, которая вставляет между каждым числом знак +, а затем вычисляет сумму полученных чисел.
#
# Формат входных данных
# На вход программе подается строка текста, содержащая натуральные числа, разделенные символом пробела.


# n = list(map(int, input().split()))
# s = 0
# for i in range(len(n)):
#     s += int(n[i])
# print(*n, sep='+', end='=')
# print(s)

# ________________________________________________________
#
# На вход программе подается строка текста. Напишите программу, которая определяет является ли введенная строка корректным телефонным номером. Строка текста является корректным телефонным номером если она имеет формат:
#
# abc-def-hijk или
# 7-abc-def-hijk
# где a, b, c, d, e, f, h, i, j, k – цифры от 0 до 9.

# n = input().split("-")
# c = [len(i) for i in n]
# if c == [3, 3, 4] and ''.join(n).isdigit():
#     print("YES")
# elif c == [1, 3, 3, 4] and ''.join(n).isdigit() and n[0] == '7':
#     print("YES")
# else:
#     print("NO")
#
# ______________________________________________
#
# На вход программе подается строка текста. Напишите программу, использующую списочное выражение, которая находит длину самого длинного слова.
#
# Формат входных данных
# На вход программе подается строка текста.

# n = input().split()
# c = [len(i) for i in n]
# print(max(c))

# __________________________________________
# На вход программе подается строка текста. Напишите программу, использующую списочное выражение, которая преобразует каждое слово введенного текста в "молодежный жаргон" по следующему правилу:
#
# первая буква каждого слова удаляется и ставится в конец слова;
# затем в конец слова добавляется слог "ки".
# Формат входных данных
# На вход программе подается строка текста на русском языке.
#
# Формат выходных данных
# Программа должна вывести текст в соответствии с условием задачи.

# n = input().split()
# print(*([i[1:] + i[0] + 'ки' for i in n]))
# _______________________________________________

# n = int(input())
# counter = 0
#
# for i in range(1, n + 1):
#     if i % 3 == 0 and i % 7 != 0:
#         counter += 1
# print(counter)

# Дано натуральное число. Напишите программу, которая вычисляет:
# n = input()
# number3 = 0
# last = n[-1]
# lastnumber = 0
# coun=0
# more5 = 0
# more7 = 1
# howmany05 = 0
# for i in n:
#     if i in '3':
#         number3 +=1
#     if i in last:
#         lastnumber +=1
#     if int(i)%2==0:
#         coun +=1
#     if int(i)>5:
#        more5 +=int(i)
#     if int(i)>7:
#        more7 *=int(i)
#     if int(i) == 0 or int(i) ==5:
#       howmany05 +=1
#
#
# print(number3)
# print(lastnumber)
# print(coun)
# print(more5)
# print(more7)
# print(howmany05)

# ______________________________________________________
# city = input()
# flag = 0
# for key, value in countries.items():
#     if city in value:
#         flag +=1
#         print(f'INFO: {city} is a city in {key}')
#     else:
#         continue
# if flag==0:
#     print(f'ERROR: Country for {city} not found')
#
# countries = {
#     "Sweden": ["Stockholm", "Göteborg", "Malmö"],
#     "Norway": ["Oslo", "Bergen", "Trondheim"],
#     "England": ["London", "Birmingham", "Manchester"],
#     "Germany": ["Berlin", "Hamburg", "Munich"],
#     "France": ["Paris", "Marseille", "Toulouse"]
# }
#
#
# city = input()
# flag = 0
# for key, value in countries.items():
#     if city in value:
#         flag +=1
#         print(f'INFO: {city} is a city in {key}')
#     else:
#         continue
# if flag==0:
#     print(f'ERROR: Country for {city} not found')

# _______________________________

# s = input()
# a = s[:s.find('h') + 1]
# b = s[s.rfind('h') :]
# s = s[s.rfind('h') -1 : s.find('h') :-1]
# # print(a)
# # print(b)
# # print(s)
# print(a + s + b)

# _______________________________________________________
#
# Мы уже с вами подсчитывали сколько раз встречается число в списке при помощи метода подсчета. Там мы использовали список для хранения найденного количества
#
# Теперь ваша задача научиться использовать словарь для подсчета количества. Вашей программе поступает на вход строка, вам необходимо подсчитать сколько раз встретилась каждая буква в этой строке без учета регистра, при этом цифры и символы пунктуации нужно пропустить. Ответ нужно сохранить в словаре, в котором ключ - буква, а значение - количество раз, сколько эта буква встретилась в строке. В качестве ответа нужно вывести словарь
#
# Sample Input 1:
#
# aabbbc
# Sample Output 1:
#
# {'a': 2, 'b': 3, 'c': 1}

# n = input().lower()
# d ={}
# for i in n:
#     if 'a' <= i <= 'z':
#         if i in d:
#             d[i] +=1
#         else:
#            d[i] = 1
#     else:
#         continue
# print(d)
# ____________________________
# n1 = sorted(input())
# n2 = sorted(input())
# if n1 == n2:
#     print('YES')
# else:
#     print('NO')
#
# _________
# print('YES' if sorted(input()) == sorted(input()) else 'NO')
#
# people = [
#     ['Amy Smith', '694.322.8133x22426'],
#     ['Brian Shaw', '593.662.5217x338'],
#     ['Christian Sharp', '118.197.8810'],
#     ['Sean Schmidt', '9722527521'],
#     ['Thomas Long', '163.814.9938'],
#     ['Joshua Willis', '+1-978-530-6971x601'],
#     ['Ann Hoffman', '434.104.4302'],
#     ['John Leonard', '(956)182-8435'],
#     ['Daniel Ross', '870-365-8303x416'],
#     ['Jacqueline Moon', '+1-757-865-4488x652'],
#     ['Gregory Baker', '705-576-1122'],
#     ['Michael Spencer', '(922)816-0599x7007'],
#     ['Austin Vazquez', '399-813-8599'],
#     ['Chad Delgado', '979.908.8506x886'],
#     ['Jonathan Gilbert', '9577853541']
# ]
#
# phone_book = {i[1]:i[0] for i in people}
# print(phone_book)
#
# def keanu_reeves(x):
#     n = 0
#     for i in range(1,x+1):
#         n +=i
#     print(f"Я знаю, что сумма чисел от 1 до {x} равна {n}")
# a = int(input())
# keanu_reeves(a)
# ______________________________________________________________
# Напишите функцию check_password, которая проверяет переданный ей пароль на сложность и печатает на экран результат проверки.
#
# Сложным паролем будет считаться комбинация символов, в которой :
#
# Есть хотя бы 3 цифры
# Есть хотя бы одна заглавная буква
# Есть хотя бы один символ из следующего набора "!@#$%*"
# Общая длина не менее 10 символов
# Если пароль прошел все проверки, функция должна вывести на экран фразу "Perfect password", в противном случае - "Easy peasy"Напишите функцию check_password, которая проверяет переданный ей пароль на сложность и печатает на экран результат проверки.
#
# Сложным паролем будет считаться комбинация символов, в которой :
#
# Есть хотя бы 3 цифры
# Есть хотя бы одна заглавная буква
# Есть хотя бы один символ из следующего набора "!@#$%*"
# Общая длина не менее 10 символов
# Если пароль прошел все проверки, функция должна вывести на экран фразу "Perfect password", в противном случае - "Easy peasy"
# def check_password(x):
#      count =0
#      count1 = 0
#      count2 = 0
#      for i in x:
#          if i in '0123456789':
#              count +=1
#          if "A" <= i <="Z":
#              count1 += 1
#          if i in "!@#$%*":
#              count2 += 1
#      if count >=3  and count1 >= 1 and count2 >=1 and len(x)>=10:
#          print("Perfect password")
#      else:
#          print("Easy peasy")
#
# a = input()
# check_password(a)


# __________________________________________
#
# Создайте функцию count_letters, которая принимает на вход фразу и подсчитывает, какое количество в ней строчных(K) и заглавных (N) букв, все остальные символы игнорируются. Функция должна вывести на экран информацию о найденных буквах в определенном формате.
#
# Количество заглавных символов: N
# Количество строчных символов: K
#
# Вам необходимо написать только определение функции.
#
# Sample Input 1:
#
# Привет, Старина
# Sample Output 1:
#
# Количество заглавных символов: 2
# Количество строчных символов: 11

# def count_letters(x):
#     count = 0
#     count1=0
#     for i in x:
#         if i.isupper():
#              count +=1
#         elif i.isalpha():
#             count1 +=1
#     print(f"Количество заглавных символов: {count}")
#     print(f"Количество строчных символов: {count1}")
# n = input()
# count_letters(n)
# _______________________________
# Напишите функцию print_initials(name, surname, middlename), которая принимает три параметра:
#
# name – имя человека;
# surname – фамилия человека;
# middlename– отчество человека;
# а затем выводит на печать фамилию и инициалы в определенном формате (первая буква фамилии должна стать заглавной, все остальные строчные; в имени и отчестве остаются только по одной букве в верхнем регистре).
#
# Ваша задача написать только определение функции, вызывать ее не нужно
# # объявление функции
# def print_initials(name, surname, middlename):
#     print(surname.capitalize(), name[0].upper() + '.', middlename[0].upper() + '.')
#
# # считываем данные
# name = input()
# surname = input()
# middlename = input()
#
# # вызываем функцию
# print_initials(name, surname, middlename)

# def factorial(x):
#     ph = 1
#     for i in range(1, x + 1):
#         ph *=i
#     print(ph)
#
# n = int(input())
# factorial(n)
# ___________________________________________
# Ваша задача написать функция find_duplicate, которая принимает один аргумент - список чисел. Функция должна возвращать список из дублей, каждый дубль нужно брать только один раз в том порядке, в котором они встречаются в исходном списке. Под дублем будем подразумевать число, которое присутствовало в списке несколько раз.
#
# def find_duplicate(s):
#     dupl = []
#     for i in s:
#         if s.count(i) >1 and i not in dupl:
#             dupl.append(i)
#     return dupl

# _________________________________________
# Напишите функцию first_unique_char, которая принимает строку символов и возвращает позицию первого уникального символа в строке. В случае, если уникальных символов в переданной строке нет, верните -1. Регистр символов не учитывайте.
#
# Ваша задача написать только определение функции first_unique_char
#
# Sample Input 1:
#
# python
# Sample Output 1:
#
# 0

# def first_unique_char(x):
#     a = []
#
#     for i in x.lower():
#         if x.count(i) == 1:
#            a.append(x.find(i))
#     if len(a) > 0:
#         return a[0]
#     else:
#         return -1
#
#
# n=input()
# first_unique_char(n)
#
# ____________________________________________
#
# Ваша задача написать функцию format_namelist, которая принимает список словарей, у каждого словаря в списке есть только ключ name
#
# Функция format_namelist должна вернуть отформатированную строку, в которой все имена из списка разделяются запятой кроме последних двух имен, они должны быть разделены союзом "и". Если в списке нет ни одного имени, функция должна вернуть пустую строку. Ниже представлены примеры:
#
# format_namelist([ {'name': 'Bart'}, {'name': 'Lisa'}, {'name': 'Maggie'} ])
# # returns 'Bart, Lisa и Maggie'

# def ormat_namelist(x):
#     a = []
#     for i
#
# n = dict(input())
# ormat_namelist(n)

# def format_namelist(h):
#     a = []
#     for i in h:
#         for j in i.values():
#             a.append(j)
#
#     b = []
#     s = ''
#     if len(a)==1:
#         return a[0]
#     elif len(a) == 2:
#         return a[0] + ' и ' + a[1]
#     elif len(a)>=3:
#         for j in range(len(a) ):
#             s = (', '.join(a[:-1])) +' и '+a[-1]
#         return s
#     else:
#         return ''
# format_namelist([{'name': 'Bart'}, {'name': 'Lisa'}, {'name': 'Maggie'}])
# ________________________________________
# Напишите функцию draw_triangle(), которая выводит звездный равнобедренный треугольник с основанием и высотой равными 1515 и 88 соответственно:
#
#        *
#       ***
#      *****
#     *******
#    *********
#   ***********
#  *************
# ***************
#
#
# def draw_triangle():
#     m = 15
#     for i in range(1, m + 1, 2):
#         print(' ' * ((m - i) // 2) + '*' * i)
#
# # основная программа
# draw_triangle()

# _______________________________________
# Интернет магазин осуществляет экспресс доставку для своих товаров по цене 10001000 рублей за первый товар и 120120 рублей за каждый последующий товар. Напишите функцию get_shipping_cost(quantity), которая принимает в качестве аргумента натуральное число quantity – количество товаров в заказе и возвращает стоимость доставки.
#
# Примечание. Следующий программный код:
#
# print(get_shipping_cost(1))
# print(get_shipping_cost(3))
# должен выводить:
#
# 1000
# 1240
#
# # объявление функции
# def get_shipping_cost(quantity):
#     return 1000 + (quantity - 1) * 120
#
# # считываем данные
# n = int(input())
#
# # вызываем функцию
# print(get_shipping_cost(n))

# _____________________________
# Напишите функцию compute_binom(n, k), которая принимает в качестве аргументов два натуральных числа n и k и возвращает значение биномиального коэффициента, равного \dfrac{n!}{k! (n-k)!}
# k!(n−k)!
# n!
# ​
#  .
#
# Примечание 1. Факториалом натурального числа nn, называется произведение всех натуральных чисел от 11 до nn, то есть
# n!=1\cdot2\cdot3\cdot…\cdot n
# n!=1⋅2⋅3⋅…⋅n
#
# Примечание 2. Реализуйте вспомогательную функцию factorial(n), вычисляющую факториал числа или воспользуйтесь уже готовой функцией из модуля math.

# import math
#
#
# def compute_binom(n, k):
#     return (math.factorial(n)/ (math.factorial(k)*((math.factorial(n) - math.factorial(k)))))
#
# # считываем данные
# n = int(input())
# k = int(input())
#
# # вызываем функцию
# print(compute_binom(n, k))

# ________________________________
# Напишите функцию number_to_words(num), которая принимает в качестве аргумента натуральное число num и возвращает его словесное описание на русском языке.
#
# Примечание 1. Считайте, что число 1 \le num \le 991≤num ≤99.
#
# Примечание 2. Следующий программный код:
#
# print(number_to_words(7))
# print(number_to_words(85))
# должен выводить:
#
# семь
# восемьдесят пять
#
# zero_to_ninety_nine = ['ноль', 'один', 'два', 'три', 'четыре', 'пять', 'шесть', 'семь', 'восемь', 'девять', 'десять', 'одиннадцать', 'двенадцать', 'тринадцать', 'четырнадцать', 'пятнадцать', 'шестнадцать', 'семнадцать', 'восемнадцать', 'девятнадцать', 'двадцать', 'двадцать один', 'двадцать два', 'двадцать три', 'двадцать четыре', 'двадцать пять', 'двадцать шесть', 'двадцать семь', 'двадцать восемь', 'двадцать девять', 'тридцать', 'тридцать один', 'тридцать два', 'тридцать три', 'тридцать четыре', 'тридцать пять', 'тридцать шесть', 'тридцать семь', 'тридцать восемь', 'тридцать девять', 'сорок', 'сорок один', 'сорок два', 'сорок три', 'сорок четыре', 'сорок пять', 'сорок шесть', 'сорок семь', 'сорок восемь', 'сорок девять', 'пятьдесят', 'пятьдесят один', 'пятьдесят два', 'пятьдесят три', 'пятьдесят четыре', 'пятьдесят пять', 'пятьдесят шесть', 'пятьдесят семь', 'пятьдесят восемь', 'пятьдесят девять', 'шестьдесят', 'шестьдесят один', 'шестьдесят два', 'шестьдесят три', 'шестьдесят четыре', 'шестьдесят пять', 'шестьдесят шесть', 'шестьдесят семь', 'шестьдесят восемь', 'шестьдесят девять', 'семьдесят', 'семьдесят один', 'семьдесят два', 'семьдесят три', 'семьдесят четыре', 'семьдесят пять', 'семьдесят шесть', 'семьдесят семь', 'семьдесят восемь', 'семьдесят девять', 'восемьдесят', 'восемьдесят один', 'восемьдесят два', 'восемьдесят три', 'восемьдесят четыре', 'восемьдесят пять', 'восемьдесят шесть', 'восемьдесят семь', 'восемьдесят восемь', 'восемьдесят девять', 'девяносто', 'девяносто один', 'девяносто два', 'девяносто три', 'девяносто четыре', 'девяносто пять', 'девяносто шесть', 'девяносто семь', 'девяносто восемь', 'девяносто девять']
# # объявление функции
# def number_to_words(num):
#     return zero_to_ninety_nine[num]
#
# # считываем данные
# n = int(input())
#
# # вызываем функцию
# print(number_to_words(n))
#
# ____________________________________________________

# Искомый месяц
# Напишите функцию get_month(language, number), которая принимает на вход два аргумента language – язык ru или en и number – номер месяца (от 1 до 12) и возвращает название месяца на русском или английском языке.
#
# Примечание. Следующий программный код:
#
# print(get_month('ru', 1))
# print(get_month('ru', 12))
# print(get_month('en', 1))
# print(get_month('en', 10))
# должен выводить:
#
# январь
# декабрь
# january
# october

#
# ru = [0, 'январь', 'февраль', 'март', 'апрель', 'май', 'июнь', 'июль', 'август', 'сентябрь', 'октябрь', 'ноябрь', 'декабрь']
# en = [0, 'january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october', 'november', 'december']
#
# # объявление функции
# def get_month(language, number):
#     if language == "ru":
#         return ru[number]
#     return en[number]
#
#
# # считываем данные
# lan = input()
# num = int(input())
#
# # вызываем функцию
# print(get_month(lan, num))

# ___________________________________________________
#
# Магические даты
# Магическая дата – это дата, когда день, умноженный на месяц, равен числу образованному последними двумя цифрами года.
#
# Напишите функцию, is_magic(date) которая принимает в качестве аргумента строковое представление корректой даты и возвращает значение True если дата является магической и False в противном случае.
#
# Примечание. Следующий программный код:
#
# print(is_magic('10.06.1960'))
# print(is_magic('11.06.1960'))
# должен выводить:
#
# True
# False
#
# # объявление функции
# def is_magic(date):
#     if (int(date[:2]) * int(date[3:5])) == (int(date[8:])):
#
#         return True
#     return False
#
# # считываем данные
# date = input()
#
# # вызываем функцию
# print(is_magic(date))
#
# __________________________________________

# Панграмма – это фраза, содержащая в себе все буквы алфавита. Обычно панграммы используют для презентации шрифтов, чтобы можно было в одной фразе рассмотреть все глифы.
#
# Напишите функцию, is_pangram(text) которая принимает в качестве аргумента строку текста на английском языке и возвращает значение True если текст является панграммой и False в противном случае.
#
# Примечание 1. Гарантируется, что введенная строка содержит только буквы английского алфавита.
#
# Примечание 2. Следующий программный код:
#
# print(is_pangram('Jackdaws love my big sphinx of quartz'))
# print(is_pangram('The jay pig fox zebra and my wolves quack'))
# print(is_pangram('Hello world'))
# должен выводить:
#
# True
# True
# False

# ________________________________________________
# Панграмма – это фраза, содержащая в себе все буквы алфавита. Обычно панграммы используют для презентации шрифтов, чтобы можно было в одной фразе рассмотреть все глифы.
#
# Напишите функцию, is_pangram(text) которая принимает в качестве аргумента строку текста на английском языке и возвращает значение True если текст является панграммой и False в противном случае.
#
# Примечание 1. Гарантируется, что введенная строка содержит только буквы английского алфавита.
#
# Примечание 2. Следующий программный код:
#
# print(is_pangram('Jackdaws love my big sphinx of quartz'))
# print(is_pangram('The jay pig fox zebra and my wolves quack'))
# print(is_pangram('Hello world'))
# должен выводить:
#
# True
# True
#
# l = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
#
# # объявление функции
# def is_pangram(text):
#     for i in text.lower():
#         if i in l:
#             l.remove(i)
#     if l == []:
#        return True
#     else:
#         return False
# # считываем данные
# text = input()
#
# # вызываем функцию
# print(is_pangram(text))

# _________---------------
#
# Напишите программу для вычисления суммы двух матриц.
#
# Формат входных данных
# На вход программе подаются два натуральных числа nn и mm — количество строк и столбцов в матрицах, затем элементы первой матрицы, затем пустая строка, далее следуют элементы второй матрицы.
#
# Формат выходных данных
# Программа должна вывести результирующую матрицу, разделяя элементы символом пробела.
#
# n, m = map(int, input().split())
#
# matrix1 = [[int(i) for i in input().split()] for j in range(n)]
# a = input()
# matrix2 = [[int(i) for i in input().split()] for j in range(n)]
# matrix3 = [[0 for _ in range(m)] for _ in range(n)]
#
# for i in range(n):
#     for j in range(m):
#         matrix3[i][j] +=matrix1[i][j] + matrix2[i][j]
#
# for r in matrix3: print(*r)

# _____________________________________________
#
# a,b,c = list(map(set,input().split()))
# print(c, b, a)
# if set(a) == set(b) and set(c) == set(b) and set(c) == set(a):
#     print("YES")
# else:
#     print("NO")
# _________________________________________
# numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
# def f(x):
#     return x**2
#
# def s(x):
#     return x**3
#
# print(list(map(f, numbers)))
# print(list(map(s, numbers)))
#
# _____________________


fib = lambda x : 1 if x <= 2 else fib(x - 1) + fib(x - 2)
fib(31)








